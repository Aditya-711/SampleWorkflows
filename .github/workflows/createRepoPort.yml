name: Create Repository Handler

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: "Name of the new repository"
        required: true
      description:
        description: "Describe the repo"
        required: true
      provider:
        description: "provider of repository"
        required: true
      template:
        description: "Template to use"
        required: true
      port_context:
        required: true
        description: "Details about the action and general context (blueprint, run id, etc...)"
        type: string

permissions:
  contents: write

jobs:
  create-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Repo
        if: ${{ github.event.inputs.provider == 'GitHub' }}
        run: |
          echo "${{ secrets.GH_PAT }}" | gh auth login --with-token
          gh repo create "${{ github.repository_owner }}/${{ github.event.inputs.repo_name }}" \
            --public \
            --description "${{ github.event.inputs.description }}" \
            --confirm

      - name: Create Bitbucket Repo
        if: ${{ github.event.inputs.provider == 'BitBucket' }}
        run: |
          curl -X POST -u "${{ secrets.BB_USER }}:${{ secrets.BB_APP_PASSWORD }}" \
            -H "Content-Type: application/json" \
            https://api.bitbucket.org/2.0/repositories/${{ secrets.BB_WORKSPACE }}/${{ github.event.inputs.repo_name }} \
            -d '{
              "scm": "git",
              "is_private": true,
              "description": "${{ github.event.inputs.description }}",
              "project": { "key": "PROJ" }
            }'

      - name: Initialize Node.js Project
        if: ${{ github.event.inputs.template == 'Nodejs' }}
        run: |
          mkdir ${{ github.event.inputs.repo_name }}
          cd ${{ github.event.inputs.repo_name }}
          npm init -y
          npm i express
          cat << 'EOF' > index.js
          const express = require('express');
          const app = express();
          const port = 3000;
          app.get('/', (req, res) => {
          res.send(`
          <!DOCTYPE html>
          <html>
          <head>
            <title>Sample App</title>
          </head>
          <body>
            <h1>Hello ADitya!</h1>
            <p>This is a very simple HTML page.</p>
          </body>
          </html>
          `);
          });
          app.listen(3000, '0.0.0.0', () => {
          console.log(\`Server running at http://localhost:\${port}\`);
          });
          EOF
          git init
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          
          if [ "${{ github.event.inputs.provider }}" = "GitHub" ]; then
            git remote add origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository_owner }}/${{ github.event.inputs.repo_name }}.git

          else
            git remote add origin https://${{ secrets.BB_USER }}:${{ secrets.BB_APP_PASSWORD }}@bitbucket.org/${{ secrets.BB_WORKSPACE }}/${{ github.event.inputs.repo_name }}.git          
          fi
          
          git add .
          git commit -m "Initial commit - Node.js starter"
          git branch -M main
          git push origin main

      - name: Initialize Python Project
        if: ${{ github.event.inputs.template == 'Python' }}
        run: |
          mkdir ${{ github.event.inputs.repo_name }}
          cd ${{ github.event.inputs.repo_name }}
          echo "print('Hello from ${{ github.event.inputs.repo_name }}')" > app.py
          echo "__pycache__/" > .gitignore
          git init
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          
          if [ "${{ github.event.inputs.provider }}" = "GitHub" ]; then
            git remote add origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository_owner }}/${{ github.event.inputs.repo_name }}.git
          else
            git remote add origin https://x-token-auth:${{ secrets.BB_APP_PASSWORD }}@bitbucket.org/${{ secrets.BB_WORKSPACE }}/${{ github.event.inputs.repo_name }}.git
          fi
          
          git add .
          git commit -m "Initial commit - Python starter"
          git branch -M main
          git push origin main

      - name: Notify Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          baseUrl: https://api.getport.io
          runId: ${{ fromJson(inputs.port_context).runId }}
          logMessage: |
            Repository initialized
          status: SUCCESS
